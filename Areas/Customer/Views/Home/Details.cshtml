@model Shop.Models.Product
@using Shop.Models;
@using Shop.Utility;
@inject IHttpContextAccessor HttpContextAccessor
@{
	List<Product> Products = new List<Product>();
	Products = HttpContextAccessor.HttpContext.Session.Get<List<Product>>("Products");
	Product product=null;
	if (Products != null)
	{
		product = Products.FirstOrDefault(product => product.Id == Model.Id);
	}
}
@{
	ViewData["Title"] = "Product Details";
}

<div class="container py-5">
	<div class="row">
		<div class="col-md-6 text-center">
			<img src="data:image/*;base64,@(Convert.ToBase64String(Model.Image))"
				 alt="@Model.Name"
				 class="img-fluid rounded shadow-sm"
				 style="max-height: 400px; object-fit: contain;" />
		</div>

		<div class="col-md-6">
			<h2 class="text-dark mb-3">@Model.Name</h2>
			<h4 class="text-primary mb-4">$@Model.Price</h4>

			<p class="mb-2">
				@if (Model.IsAvailable)
				{
					<span class="text-success">
						<i class="fa-solid fa-check-circle me-1"></i> In Stock
					</span>
				}
				else
				{
					<span class="text-danger">
						<i class="fa-solid fa-times-circle me-1"></i> Out of Stock
					</span>
				}
			</p>
			<p class="mb-2"><strong>Color:</strong> @Model.ProductColor</p>
			<p class="mb-2"><strong>Type:</strong> @Model.ProductType?.ProductType</p>
			<p class="mb-4"><strong>Tag:</strong> @Model.SpecialTag?.SpecialTagName</p>

			<div class="d-flex gap-2">
				<a asp-action="Index" class="btn btn-outline-secondary">← Back to Products</a>

				@if (Model.IsAvailable)
				{
					<a asp-action="@(product!=null ? "RemoveFromCartInPage" : "AddToCart")" asp-route-id="@Model.Id" class="btn @(product!=null ? "btn-danger" : "btn-info")">
						<i class="fa @(product!=null ? "fa-times-circle" : "fa-shopping-cart") me-1"></i>
						@(product!=null ? "Remove from Cart" : "Add to Cart")
					</a>

				}
			</div>
		</div>
	</div>
</div>
